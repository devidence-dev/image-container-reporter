name: CI

on:
  push:
    branches: [ main, go-main ]
  pull_request:
    branches: [ main, go-main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04-arm
            go-version: '1.25.1'
            arch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests with coverage
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ] || [ "${{ matrix.os }}" = "macos-latest" ]; then
          echo "Running tests with race detection"
          go test ./... -race -coverprofile=coverage.out -covermode=atomic
        else
          echo "Running tests without race detection (ARM64 limitation)"
          go test ./... -coverprofile=coverage.out -covermode=atomic
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run go vet
      run: go vet ./...

    - name: Install golangci-lint
      run: |
        curl -L https://github.com/golangci/golangci-lint/releases/download/v2.5.0/golangci-lint-2.5.0-linux-arm64.tar.gz -o golangci-lint.tar.gz
        tar -xzf golangci-lint.tar.gz
        sudo mv golangci-lint-2.5.0-linux-arm64/golangci-lint /usr/local/bin/
        rm -rf golangci-lint*

    - name: Run golangci-lint
      run: golangci-lint run

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run govulncheck
      run: govulncheck ./...

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04-arm
            go-version: '1.25.1'
            arch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      run: |
        GOOS=$(echo ${{ matrix.os }} | sed 's/ubuntu.*/linux/' | sed 's/macos.*/darwin/' | sed 's/windows.*/windows/')
        GOARCH=${{ matrix.arch }}
        BINARY_NAME=icr-${GOARCH}
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME=${BINARY_NAME}.exe
        fi
        echo "Building for $GOOS/$GOARCH"
        CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -ldflags="-w -s" -o $BINARY_NAME ./main.go

    - name: Test binary execution
      run: |
        GOARCH=${{ matrix.arch }}
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ./icr-amd64.exe --help
        else
          ./icr-${GOARCH} --help
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: icr-${{ matrix.arch }}
        path: icr-*