name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.1'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test ./... -coverprofile=coverage.out

    - name: Generate coverage report
      run: go tool cover -func=coverage.out

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Security scan
      run: govulncheck ./...

    - name: Create release directory
      run: mkdir -p release

    - name: Build binaries
      run: |
        # Build matrix for target platforms (prioritizing ARM64)
        platforms=(
          "linux/arm64"
        )

        for platform in "${platforms[@]}"; do
          GOOS=${platform%/*}
          GOARCH=${platform#*/}
          BINARY_NAME="icr-${GOOS}-${GOARCH}"

          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          echo "Building for $GOOS/$GOARCH"
          CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
            -ldflags="-w -s -X main.version=${GITHUB_REF#refs/tags/v}" \
            -o "release/$BINARY_NAME" \
            ./main.go

          # Generate SHA256 checksum
          sha256sum "release/$BINARY_NAME" > "release/${BINARY_NAME}.sha256"
        done

    - name: Create release notes
      run: |
        cat > release/RELEASE_NOTES.md << 'EOF'
        # Image Container Reporter (ICR) ${{ github.ref_name }}

        A powerful tool to scan docker-compose files and report available updates for Docker images from various registries.

        ## What's New

        This release includes bug fixes and improvements.

        ## Installation

        Download the appropriate binary for your platform from the assets below.

        ### ARM64 (Raspberry Pi 5, Apple Silicon, etc.)
        ```bash
        # For ARM64 platforms (Raspberry Pi 5, Apple M1/M2/M3, etc.)
        wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/icr-linux-arm64
        wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/icr-linux-arm64.sha256
        sha256sum -c icr-linux-arm64.sha256

        chmod +x icr-linux-arm64
        sudo mv icr-linux-arm64 /usr/local/bin/icr
        ```

        ### Other Platforms

        This release only includes binaries for Linux ARM64. For other platforms (AMD64, macOS, Windows), you can build from source:

        ```bash
        git clone https://github.com/${{ github.repository }}.git
        cd image-container-reporter
        go build -o icr ./main.go
        ```

        ## Usage

        ```bash
        # Scan current directory
        icr scan

        # Scan specific path
        icr scan /path/to/docker-compose.yml

        # Scan and send Telegram notification
        icr scan --notify
        ```

        ## Configuration

        Create a configuration file at `~/.icr/config.yml`:

        ```yaml
        telegram:
          bot_token: "your_bot_token_here"
          chat_id: "your_chat_id_here"

        registries:
          github:
            token: "your_github_token_here"
        ```

        For detailed documentation, see: https://github.com/${{ github.repository }}/blob/main/README.md
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        body_path: release/RELEASE_NOTES.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}